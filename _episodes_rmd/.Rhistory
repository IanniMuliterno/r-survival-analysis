## dth flag
## occupation
chisq.test(got_cat$sex, got_cat$allegiance_switched, correct=FALSE)
got_cat$allegiance_switched
## dth flag
## occupation
chisq.test(got_cat$sex, got_cat$allegiance_switched, correct=FALSE)
## dth flag
## occupation
chisq.test(got_cat$sex, got_cat$allegiance_last, correct=FALSE)
## dth flag
## occupation
chisq.test(got_cat$sex, got_cat$time_of_day, correct=FALSE)
## dth flag
## occupation
chisq.test(got_cat$sex, got_cat$social_status, correct=FALSE)
## dth flag
## occupation
chisq.test(got_cat$sex, got_cat$occupation, correct=FALSE)
got_occup <- got_cat %>%
filter(occupation != "Unknown/Unclear")
table(got_cat$sex, got_cat$dth_flag)
chisq.test(got_occup$sex, got_occup$occupation, correct=FALSE)
table(got_cat$sex, got_cat$occupation)
?chisq.test
## remove characters for which occupation is not known
got_occup <- got_cat %>%
filter(occupation != "Unknown/Unclear")
chisq.test(got_occup$sex, got_occup$occupation, correct = FALSE)
chisq.test(got_cat$sex, got_cat$dth_flag, correct = FALSE)
table(got_cat$dth_flag)
chisq.test(got_cat$sex, got_cat$dth_flag, correct = FALSE)
balance <- 100
repayment <- 10
interest <- 12
interest <- 2
balance <- balance - repayment
balance * (1 + interest)
interest
interest
## convert to decimal representation
interest <- interest/100
interest
balance * (1 + interest)
count <- 0
while (balance > 0) {
balance <- balance - repayment
balance <- balance * (1 + interest)
count <- count + 1
}
balance
count
estimateTIME <- function(balance, repayment, interest) {
if (interest > 1) {
## convert to decimal representation
interest <- interest/100
}
count <- 0
while (balance > 0) {
balance <- balance - repayment
balance <- balance * (1 + interest)
count <- count + 1
}
}
estimateTIME <- function(balance, repayment, interest) {
if (interest > 1) {
## convert to decimal representation
interest <- interest/100
}
count <- 0
while (balance > 0) {
balance <- balance - repayment
balance <- balance * (1 + interest)
count <- count + 1
}
return(count)
}
estimateTIME(balance = 14448.11, repayment = 147.3147, interest = 1.75)
balance = 14448.11
repayment = 147.3147
interest = 1.75
## convert to decimal representation
interest <- interest/100
count <- 0
while (balance > 0) {
print(balance)
balance <- balance - repayment
balance <- balance * (1 + interest)
count <- count + 1
}
balance = 14448.11
count <- 0
print(balance)
balance <- balance - repayment
balance <- balance * (1 + interest)
count <- count + 1
balance
count <- 0
while (balance > 0) {
if (balance < 10) {
break()
}
print(balance)
balance <- balance - repayment
balance <- balance * (1 + interest)
count <- count + 1
}
interest
balance * (1 + interest)
balance = 14448.11
balance * (1 + interest)
balance * interes
balance * interest
14.33/14027
14400 * 0.01
144*100
14400 * 0.0175
(14400 * 0.0175)/12
balance * (1 + interest)
(balance * (1 + interest))/12
(balance * interest)/12
count <- 0
while (balance > 0) {
if (balance < 10) {
break()
}
print(balance)
balance <- balance - repayment
balance <- balance + ((balance * interest)/12)
count <- count + 1
}
count
106/12
balance
estimateTIME <- function(balance, repayment, interest) {
if (interest > 1) {
## convert to decimal representation
interest <- interest/100
}
count <- 0
while (balance > 0) {
if (balance < 10) {
break()
}
print(balance)
balance <- balance - repayment
balance <- balance + ((balance * interest)/12)
count <- count + 1
}
return(count)
}
estimateTIME(balance = 14448.11, repayment = 147.3147, interest = 1.75)
estimateTIME(balance = 14448.11, repayment = 300, interest = 1.75)
21*12
?fillPEAKS
library(massFlowR)
?fillPEAKS
?validPEAKS
?alignPEAKS
?do_alignPEAKS
?fillPEAKS
out_dir <- "/media/rds/home/WORK/airwave/aw1shpos/comparison/"
# Overall summary ---------------------------------------------------------
library(ggplot2)
library(dplyr)
tab <- read.csv(paste0(out_dir, "DBannotator-threshold-5_annotations_summary.csv"),
header = TRUE, stringsAsFactors = FALSE)
traceback()
tab <- read.csv(paste0(out_dir, "DBannotator-threshold-5_annotations_summary.csv"),
header = TRUE, stringsAsFactors = FALSE)
tab <- read.csv(paste0(out_dir, "DBannotator-threshold-5_annotations_summary.csv"),
header = TRUE, stringsAsFactors = FALSE)
tab <- read.csv(paste0(out_dir, "DBannotator-threshold-5_annotations_summary.csv"),
header = TRUE, stringsAsFactors = FALSE)
paste0(out_dir, "DBannotator-threshold-5_annotations_summary.csv")
paste0(out_dir, "DBannotator-threshold-5_annotations_summary.csv") %>% file.exists()
tab <- read.csv(paste0(out_dir, "DBannotator-threshold-5_annotations_summary.csv"),
header = TRUE, stringsAsFactors = FALSE)
library(readxl)
DBannotator_threshold_5_annotations_summary <- read_excel("/media/rds/home/WORK/airwave/aw1shpos/comparison/DBannotator-threshold-5_annotations_summary.xlsx")
View(DBannotator_threshold_5_annotations_summary)
tab <- read.csv(paste0(out_dir, "DBannotator-threshold-5_annotations_summary.csv"),
header = TRUE, stringsAsFactors = FALSE)
tab <- read.csv(paste0(out_dir, "DBannotator-threshold-5_annotations_summary.csv"),
header = TRUE, stringsAsFactors = FALSE)
View(tab)
tab$cpdID
strsplit(tab$cpdID, ".")
strsplit(tab$cpdID, "//.")
strsplit(tab$cpdID, "\.")
strsplit(tab$cpdID, "/.")
?strsplit
strsplit(tab$cpdID, "//.")
strsplit(tab$cpdID, "//.//")
strsplit(tab$cpdID, ".", fixed = TRUE)
strsplit(tab$cpdID, ".", fixed = TRUE)[[1]]
strsplit(tab$cpdID, ".", fixed = TRUE)[[1]][[1]]
sapply(tab$cpdID, function(cpdID) {
strsplit(cpdID, ".", fixed = TRUE)[[1]]
})
tab$cpdID
tab$cpdID[[1]]
cpdID <- tab$cpdID[[1]]
strsplit(cpdID, ".", fixed = TRUE)
sapply(tab$cpdID, function(cpdID) {
strsplit(cpdID, ".", fixed = TRUE)[[1]][[1]]
})
lapply(tab$cpdID, function(cpdID) {
strsplit(cpdID, ".", fixed = TRUE)[[1]][[1]]
})
unlist(lapply(tab$cpdID, function(cpdID) {
strsplit(cpdID, ".", fixed = TRUE)[[1]][[1]]
}))
tab$cpdID_metabolite <- unlist(lapply(tab$cpdID, function(cpdID) {
strsplit(cpdID, ".", fixed = TRUE)[[1]][[1]]
}))
View(tab)
tab %>%
group_by(cpdID_metabolite) %>%
summarise(all_correct = all(rank == 1))
tab %>%
group_by(cpdID_metabolite) %>%
summarise(all_correct = all(rank == 1),
some_correct = any(rank == 1))
tab %>%
group_by(cpdID_metabolite) %>%
summarise(all_correct = all(rank == 1),
some_correct = any(rank == 1),
none_correct = all(rank != 1))
tab %>%
group_by(cpdID_metabolite) %>%
summarise(all_correct = all(rank == 1),
some_correct = any(rank == 1),
none_correct = all(rank != 1)) %>% View()
list(c(1,2), FALSE)
as.data.frame(list(c(1,2), FALSE))
as.data.frame(list(c(1,2), FALSE, c("R", "C", "B")))
120-67.5
pca.na
pct.na
pct.na
is.na(c(NA, 1, 2))
quantile(is.na(c(NA, 1, 2)))
matrix(1,2,3)
dimnames(matrix(1,2,3))
dimnames(matrix(1,2,3)) <- c(1,2,3)
cbind(c(1,2,3,), c(4:6))
cbind(c(1,2,3), c(4:6))
class(cbind(c(1,2,3), c(4:6)))
class(cbind(c(1,2,3), data.frame(c(4:6))))
pivot
??pivot
??cast
cats
cast
c(1L, 2L)
class(c(1L, 2L))
median(c(1L, 2L))
class(median(c(1L, 2L)))
ls(pat="V")
ls(char="V")
Vv <-1
ls(pat="V")
?gl
?gm
?glm
library(knitr)
dependencies <- c("scales", "gridExtra", "reshape2", "pROC", "colorRamps", "RColorBrewer", "calibrate", "ellipse", "ggrepel",
"pcaMethods", "plyr", "ptw", "methods", "ggplot2", "speaq", "doParallel", "foreach", "knitr", "rmarkdown", "spelling", "testthat")
installed <- installed.packages()
to_install <- subset(dependencies, !(dependencies %in% installed[, "Package"]))
if (length(to_install) != 0) {
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
message("Installing packages: ", to_install, " ...")
BiocManager::install(to_install)
} else {
message("All dependencies are already installed.")
}
install.packages("speaq")
install.packages("speaq")
remove.packages("RcppGSL")
library(RcppGSL)
install.packages("RcppGSL")
install.packages("RcppGSL")
dependencies <- c("scales", "gridExtra", "reshape2", "pROC", "colorRamps", "RColorBrewer", "calibrate", "ellipse", "ggrepel",
"pcaMethods", "plyr", "ptw", "methods", "ggplot2", "speaq", "doParallel", "foreach", "knitr", "rmarkdown", "spelling", "testthat")
installed <- installed.packages()
to_install <- subset(dependencies, !(dependencies %in% installed[, "Package"]))
to_install
BiocManager::install(to_install)
dependencies <- c("scales", "gridExtra", "reshape2", "pROC", "colorRamps", "RColorBrewer", "calibrate", "ellipse", "ggrepel",
"pcaMethods", "plyr", "ptw", "methods", "ggplot2", "speaq", "doParallel", "foreach", "knitr", "rmarkdown", "spelling", "testthat")
installed <- installed.packages()
to_install <- subset(dependencies, !(dependencies %in% installed[, "Package"]))
# To install development version
devtools::install_github("tkimhofer/MetaboMate", dependencies = FALSE)
dependencies <- c("scales", "gridExtra", "reshape2", "pROC", "colorRamps", "RColorBrewer", "calibrate", "ellipse", "ggrepel",
"pcaMethods", "plyr", "plotly", "ptw", "methods", "ggplot2", "speaq", "doParallel", "foreach", "knitr", "rmarkdown", "spelling", "testthat")
installed <- installed.packages()
to_install <- subset(dependencies, !(dependencies %in% installed[, "Package"]))
if (length(to_install) != 0) {
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
message("Installing packages: ", to_install, " ...")
BiocManager::install(to_install)
} else {
message("All dependencies are already installed.")
}
## now install MetaboMate on its own
devtools::install_github("tkimhofer/MetaboMate", dependencies = FALSE)
library(MetaboMate)
sessionInfo()
R.home()
dependencies <- c("xcms",  "MSnbase", "faahKO", "igraph", "doParallel",  "foreach", "ggplot2", "viridis", "gridExtra")
install.packages("BiocManager")
BiocManager::version()
BiocManager::install(dependencies)
to_install <- subset(dependencies, !(dependencies %in% installed[, "Package"]))
installed <- installed.packages()
to_install <- subset(dependencies, !(dependencies %in% installed[, "Package"]))
to_install
BiocManager::install(to_install)
to_install <- subset(dependencies, !(dependencies %in% installed[, "Package"]))
to_install
installed <- installed.packages()
to_install <- subset(dependencies, !(dependencies %in% installed[, "Package"]))
to_install
devtools::install_github("lauzikaite/massflowR", dependencies = FALSE, ref = "develop")
library(devtools)
library(usethis)
devtools::install_github("lauzikaite/massflowR", dependencies = FALSE, ref = "develop")
remove.packages("devtools")
install.packages("devtools")
install.packages("devtools")
.libPaths()
devtools::install_github("lauzikaite/massflowR", dependencies = FALSE, ref = "develop")
BiocManager::install("phenomecentre/peakPantheR")
BiocManager::install("phenomecentre/peakPantheR")
devtools::install("phenomecentre/peakPantheR")
devtools::install_git("phenomecentre/peakPantheR")
devtools::install_github("phenomecentre/peakPantheR")
devtools::install_github
utils::untar
Sys.getenv("TAR")
?Sys.getenv
R.home()
options()
options("download.file.method")
Sys.getenv("tar")
Sys.getenv("TAR")
R.home()
Sys.getenv("TAR", unset = NULL)
Sys.getenv("TAR", unset = TRUE)
Sys.getenv("TAR")
Sys.getenv("TAR", unset = "/bin/tar")
Sys.getenv("TAR")
usethis::edit_r_environ()
sys.setenv
?sys.setenv
Sys.getenv()
Sys.getenv("TAR")
usethis::edit_r_environ()
install.packages("survminer")
getwd()
source("../bin/chunk-options.R")
knitr_fig_path("1-")
library(dplyr)
got_dat <- read.csv(file = "./data/character_data_S01-S08.csv", header = TRUE, stringsAsFactors = FALSE)
meta <- read.csv(file = "./data/encoding.csv", header = TRUE, stringsAsFactors = FALSE)
## remove columns that only contain NAs as entries
got <- got_dat[ , which(!apply(got_dat, 2, function(x) all(is.na(x))))]
library(ggplot2)
## What are the categorial variables?
cols_cat <- unique(meta$variable)
## iterate over the categorial variables
got_cat <- lapply(cols_cat, function(col) {
## extract the numerical categories for the variable
got_col <- got[ , col]
## find the corresponding entries in the metadata encoding table
meta_col <- meta[meta$variable == col, ]
meta_col$value[match(got_col, meta_col$code)]
})
got_cat <- setNames(
## cbind the list of extracted values
as.data.frame(do.call(cbind, got_cat)),
nm = c(cols_cat))
head(got[got$dth_flag == 1, "icd10_cause_text"])
library(survival)
library(survminer)
## got and got_cat have the same order, therefore we can simply take the columns from got
got_cat$exp_time_hrs <- got$exp_time_hrs
got_cat$dth_flag <- got$dth_flag
surv_object <- with(got_cat, Surv(exp_time_hrs, dth_flag))
## survival without grouping requires to specify 1 in the formula
surv_model <- survfit(Surv(exp_time_hrs, dth_flag) ~ 1, data = got_cat)
ggsurvplot(surv_model, data = got_cat, surv.median.line = "hv")
install.packages(c("knitr", "stringr", "checkpoint"))
install.packages(c("knitr", "stringr", "checkpoint"))
install.packages(c("knitr", "stringr", "checkpoint"))
install.packages(c("knitr", "stringr", "checkpoint"))
install.packages(c("knitr", "stringr", "checkpoint"))
install.packages(c("knitr", "stringr", "checkpoint"))
install.packages(c("knitr", "stringr", "checkpoint"))
install.packages(c("knitr", "stringr", "checkpoint"))
install.packages(c("knitr", "stringr", "checkpoint"))
install.packages(c("knitr", "stringr", "checkpoint"))
install.packages(c("knitr", "stringr", "checkpoint"))
install.packages(c("knitr", "stringr", "checkpoint"))
install.packages(c("knitr", "stringr", "checkpoint"))
dependencies <- c("dplyr",  "ggplot2", "survival", "survminer")
installed <- installed.packages()
to_install <- subset(dependencies, !(dependencies %in% installed[, "Package"]))
dependencies <- c("dplyr",  "ggplot2", "survival", "survminer")
BiocManager::install(dependencies)
BiocManager::install("survminer")
.libPaths()
R.home()
getwd()
setwd("~/Documents/Scripts/r-survival-analysis/_episodes_rmd")
library(dplyr)
got_dat <- read.csv(file = "./data/character_data_S01-S08.csv", header = TRUE, stringsAsFactors = FALSE)
meta <- read.csv(file = "./data/encoding.csv", header = TRUE, stringsAsFactors = FALSE)
## remove columns that only contain NAs as entries
# (1) for each column, do all rows contain NAs?
nas_all <- got_dat %>%
summarise_all(funs(all(is.na(.))))
# (2) which columns contain only NAs?
to_remove <- which(nas_all == TRUE)
# (3) remove these columns
got <- got_dat[, -to_remove]
library(ggplot2)
plot(1:10)
.libPaths()
.libPaths("/home/elze/anaconda3/lib/R/library")
.libPaths()
library(ggplot2)
## (1) What are the unique categorial variables?
cols_cat <- unique(meta$variable)
## (2) Use tidyr::pivot_longer to pivot data to long format:
# for each character, extract all of the categorical variables into a separate row
got_cat_long <- got %>%
# use all_of() to force the selection of the column names listed in the variable cols_cat
select(all_of(cols_cat), id, name) %>%
tidyr::pivot_longer(-c(id, name),
names_to = "cat_variable",
values_to = "cat_code")
## (3) Extract variables' values from meta data.frame
got_cat_long <- got_cat_long %>%
# for each character and variable combination
rowwise() %>%
mutate(variable_value = ifelse(
# if character and variable combination is not NA
is.na(cat_code), NA,
# extract the variable's value from the meta data.frame
meta %>%
filter(variable == cat_variable, code == cat_code) %>%
select(value) %>%
pull())) %>%
select(-cat_code)
## (3) Extract variables' values from meta data.frame
got_cat_long <- got_cat_long %>%
# for each character and variable combination
rowwise() %>%
mutate(variable_value = ifelse(
# if character and variable combination is not NA
is.na(cat_code), NA,
# extract the variable's value from the meta data.frame
meta %>%
filter(variable == cat_variable, code == cat_code) %>%
select(value) %>%
pull())) %>%
select(-cat_code)
ggplot(got) +
geom_bar(aes(x = as.factor(intro_season))) +
scale_x_discrete(name = "Season number") +
ggtitle("How many new characters were introduced in each season")
## (2) Use tidyr::pivot_longer to pivot data to long format:
# for each character, extract all of the categorical variables into a separate row
got_cat_long <- got %>%
# use all_of() to force the selection of the column names listed in the variable cols_cat
select(all_of(cols_cat), id, name) %>%
tidyr::pivot_longer(-c(id, name),
names_to = "cat_variable",
values_to = "cat_code")
## (3) Extract variables' values from meta data.frame
got_cat_long <- got_cat_long %>%
# for each character and variable combination
rowwise() %>%
mutate(variable_value = ifelse(
# if character and variable combination is not NA
is.na(cat_code), NA,
# extract the variable's value from the meta data.frame
meta %>%
filter(variable == cat_variable, code == cat_code) %>%
select(value) %>%
pull())) %>%
select(-cat_code)
## (4) Use tidyr::pivot_wider to pivot data back to wide format:
got_cat <- got_cat_long %>%
tidyr::pivot_wider(names_from = cat_variable,
values_from = variable_value) %>%
# remove grouping by rows
ungroup()
table(got_cat$sex, got_cat$occupation)
chisq.test(got_cat$sex, got_cat$occupation, correct = FALSE)
got_occup <- got_cat %>%
filter(occupation != "Unknown/Unclear")
chisq.test(got_occup$sex, got_occup$occupation, correct = FALSE)
help("Startup")
